Input: 
	-Size of Matrix
	-Number of nonzeros
	-Symmetric
	-2D/3D discretization
	-Pos/Def
	-Kind of problem

Output: (More than one network for outputs?)
	-Tolerance
	-Maximum number of iterations
	-Type of preconditioner
	-droptol
	-diagcomp


Structure:
	-One layer sufficient to utilize predictive capability
	-No dropout if possible
	-Simplify cost function

Model:
	-If less than 1e-8, = zero
	-Round other numbers

TO DO:
	-Try RNN for droptol

EXPORT PLAN:
	-.csv decoder in TF
	-Within reader function, translate strings into ints, then back into strings @ output
	-Scale ints before and after NN


Training/Testing Data:
-236 Positive Definite Matrices 
-Input: All values of matrices
-Layers: Look into RNN/CNN??
-Output: Pre-calculated preconditioners

Results:
	-Accuracy OK so far, iterative solver/preconditioner expert would help a lot
	-Main limitation: my knowledge (or lack thereof) of the subject matter



